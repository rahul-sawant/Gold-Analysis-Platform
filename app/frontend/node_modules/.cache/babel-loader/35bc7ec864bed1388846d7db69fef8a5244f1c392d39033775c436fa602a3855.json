{"ast":null,"code":"import React from'react';import{Line}from'react-chartjs-2';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';import moment from'moment';// Register ChartJS components\nimport{jsx as _jsx}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);const PriceChart=_ref=>{let{priceData,title='Gold Price Chart',showPrediction=false,predictionData=[]}=_ref;// Error handling for priceData\nif(!priceData||!Array.isArray(priceData)){console.error('Invalid price data format:',priceData);return/*#__PURE__*/_jsx(\"div\",{children:\"No valid price data available\"});}// Handle empty data\nif(priceData.length===0){return/*#__PURE__*/_jsx(\"div\",{children:\"No price data available\"});}// Process price data for chart\nconst timestamps=priceData.map(item=>item&&item.timestamp?moment(item.timestamp).format('MM/DD/YYYY HH:mm'):'').filter(item=>item!=='');const closePrices=priceData.map(item=>item&&typeof item.close!=='undefined'?item.close:null).filter(item=>item!==null);// If we don't have valid data after filtering, return error message\nif(timestamps.length===0||closePrices.length===0){return/*#__PURE__*/_jsx(\"div\",{children:\"Invalid data format\"});}// Prepare prediction data if available\nlet predictionTimestamps=[];let predictedPrices=[];if(showPrediction&&predictionData){// Ensure predictionData is an array\nconst predArray=Array.isArray(predictionData)?predictionData:[];if(predArray.length>0){predictionTimestamps=predArray.map(item=>item&&item.timestamp?moment(item.timestamp).format('MM/DD/YYYY HH:mm'):'').filter(item=>item!=='');predictedPrices=predArray.map(item=>item&&typeof item.predicted_price!=='undefined'?item.predicted_price:null).filter(item=>item!==null);}}// Combine real data with predictions for continuous line\nconst allTimestamps=[...timestamps];const allClosePrices=[...closePrices];if(showPrediction&&predictionTimestamps.length>0&&predictedPrices.length>0){// Add the prediction data\nallTimestamps.push(...predictionTimestamps);// Create a null-filled array matching the size of the real data\nconst nullArray=Array(closePrices.length).fill(null);// Create prediction line with nulls for historical data points\nconst predictionLine=[...nullArray,...predictedPrices];// Ensure both arrays have the same length\nif(allTimestamps.length>predictionLine.length){const diff=allTimestamps.length-predictionLine.length;for(let i=0;i<diff;i++){predictionLine.push(null);}}// Chart data\nconst chartData={labels:allTimestamps,datasets:[{label:'Actual Price',data:allClosePrices,borderColor:'#d4af37',backgroundColor:'rgba(212, 175, 55, 0.1)',fill:true,tension:0.1},{label:'Predicted Price',data:predictionLine,borderColor:'#3399ff',backgroundColor:'rgba(51, 153, 255, 0.1)',borderDash:[5,5],fill:true,tension:0.1}]};const options={responsive:true,plugins:{legend:{position:'top'},title:{display:true,text:title},tooltip:{mode:'index',intersect:false}},hover:{mode:'nearest',intersect:true},scales:{x:{display:true,title:{display:true,text:'Time'}},y:{display:true,title:{display:true,text:'Price'}}}};return/*#__PURE__*/_jsx(Line,{data:chartData,options:options,height:80});}else{// Simple chart without predictions\nconst chartData={labels:timestamps,datasets:[{label:'Gold Price',data:closePrices,borderColor:'#d4af37',backgroundColor:'rgba(212, 175, 55, 0.1)',fill:true,tension:0.1}]};const options={responsive:true,plugins:{legend:{position:'top'},title:{display:true,text:title}},scales:{x:{display:true,title:{display:true,text:'Time'}},y:{display:true,title:{display:true,text:'Price'}}}};return/*#__PURE__*/_jsx(Line,{data:chartData,options:options,height:80});}};export default PriceChart;","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","moment","jsx","_jsx","register","PriceChart","_ref","priceData","title","showPrediction","predictionData","Array","isArray","console","error","children","length","timestamps","map","item","timestamp","format","filter","closePrices","close","predictionTimestamps","predictedPrices","predArray","predicted_price","allTimestamps","allClosePrices","push","nullArray","fill","predictionLine","diff","i","chartData","labels","datasets","label","data","borderColor","backgroundColor","tension","borderDash","options","responsive","plugins","legend","position","display","text","tooltip","mode","intersect","hover","scales","x","y","height"],"sources":["/Users/rahulsawant/Documents/Projects/goldpredict/Gold Analysis Platform/app/frontend/src/components/PriceChart.js"],"sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport moment from 'moment';\n\n// Register ChartJS components\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst PriceChart = ({ priceData, title = 'Gold Price Chart', showPrediction = false, predictionData = [] }) => {\n  // Error handling for priceData\n  if (!priceData || !Array.isArray(priceData)) {\n    console.error('Invalid price data format:', priceData);\n    return <div>No valid price data available</div>;\n  }\n\n  // Handle empty data\n  if (priceData.length === 0) {\n    return <div>No price data available</div>;\n  }\n\n  // Process price data for chart\n  const timestamps = priceData.map(item => \n    item && item.timestamp ? moment(item.timestamp).format('MM/DD/YYYY HH:mm') : ''\n  ).filter(item => item !== '');\n  \n  const closePrices = priceData.map(item => \n    item && typeof item.close !== 'undefined' ? item.close : null\n  ).filter(item => item !== null);\n  \n  // If we don't have valid data after filtering, return error message\n  if (timestamps.length === 0 || closePrices.length === 0) {\n    return <div>Invalid data format</div>;\n  }\n  \n  // Prepare prediction data if available\n  let predictionTimestamps = [];\n  let predictedPrices = [];\n  \n  if (showPrediction && predictionData) {\n    // Ensure predictionData is an array\n    const predArray = Array.isArray(predictionData) ? predictionData : [];\n    \n    if (predArray.length > 0) {\n      predictionTimestamps = predArray\n        .map(item => item && item.timestamp ? moment(item.timestamp).format('MM/DD/YYYY HH:mm') : '')\n        .filter(item => item !== '');\n        \n      predictedPrices = predArray\n        .map(item => item && typeof item.predicted_price !== 'undefined' ? item.predicted_price : null)\n        .filter(item => item !== null);\n    }\n  }\n  \n  // Combine real data with predictions for continuous line\n  const allTimestamps = [...timestamps];\n  const allClosePrices = [...closePrices];\n  \n  if (showPrediction && predictionTimestamps.length > 0 && predictedPrices.length > 0) {\n    // Add the prediction data\n    allTimestamps.push(...predictionTimestamps);\n    \n    // Create a null-filled array matching the size of the real data\n    const nullArray = Array(closePrices.length).fill(null);\n    \n    // Create prediction line with nulls for historical data points\n    const predictionLine = [...nullArray, ...predictedPrices];\n    \n    // Ensure both arrays have the same length\n    if (allTimestamps.length > predictionLine.length) {\n      const diff = allTimestamps.length - predictionLine.length;\n      for (let i = 0; i < diff; i++) {\n        predictionLine.push(null);\n      }\n    }\n    \n    // Chart data\n    const chartData = {\n      labels: allTimestamps,\n      datasets: [\n        {\n          label: 'Actual Price',\n          data: allClosePrices,\n          borderColor: '#d4af37',\n          backgroundColor: 'rgba(212, 175, 55, 0.1)',\n          fill: true,\n          tension: 0.1\n        },\n        {\n          label: 'Predicted Price',\n          data: predictionLine,\n          borderColor: '#3399ff',\n          backgroundColor: 'rgba(51, 153, 255, 0.1)',\n          borderDash: [5, 5],\n          fill: true,\n          tension: 0.1\n        }\n      ]\n    };\n    \n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: title\n        },\n        tooltip: {\n          mode: 'index',\n          intersect: false\n        }\n      },\n      hover: {\n        mode: 'nearest',\n        intersect: true\n      },\n      scales: {\n        x: {\n          display: true,\n          title: {\n            display: true,\n            text: 'Time'\n          }\n        },\n        y: {\n          display: true,\n          title: {\n            display: true,\n            text: 'Price'\n          }\n        }\n      }\n    };\n    \n    return <Line data={chartData} options={options} height={80} />;\n  } else {\n    // Simple chart without predictions\n    const chartData = {\n      labels: timestamps,\n      datasets: [\n        {\n          label: 'Gold Price',\n          data: closePrices,\n          borderColor: '#d4af37',\n          backgroundColor: 'rgba(212, 175, 55, 0.1)',\n          fill: true,\n          tension: 0.1\n        }\n      ]\n    };\n    \n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top',\n        },\n        title: {\n          display: true,\n          text: title\n        }\n      },\n      scales: {\n        x: {\n          display: true,\n          title: {\n            display: true,\n            text: 'Time'\n          }\n        },\n        y: {\n          display: true,\n          title: {\n            display: true,\n            text: 'Price'\n          }\n        }\n      }\n    };\n    \n    return <Line data={chartData} options={options} height={80} />;\n  }\n};\n\nexport default PriceChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}