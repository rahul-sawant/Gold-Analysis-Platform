{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Container,Row,Col,Card,Button,ButtonGroup,Alert}from'react-bootstrap';import PriceChart from'../components/PriceChart';import SignalDisplay from'../components/SignalDisplay';import LoadingSpinner from'../components/LoadingSpinner';import api from'../services/api';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=()=>{const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[priceData,setPriceData]=useState([]);const[predictions,setPredictions]=useState([]);const[signals,setSignals]=useState({});const[selectedTimeframe,setSelectedTimeframe]=useState('1h');const[lastUpdate,setLastUpdate]=useState(null);const[showPredictions,setShowPredictions]=useState(true);// Fetch dashboard data\nconst fetchDashboardData=async timeframe=>{setLoading(true);setError(null);try{// Fetch price data\nconst priceResponse=await api.getPriceData(timeframe,100);setPriceData(priceResponse.data);// Fetch predictions\nconst predictionsResponse=await api.getPredictions(timeframe);setPredictions(predictionsResponse.data);// Fetch signal\nconst signalResponse=await api.getSignal(timeframe);setSignals(signalResponse.data);setLastUpdate(new Date());}catch(err){console.error('Error fetching dashboard data:',err);setError('Failed to load dashboard data. Please try again later.');}finally{setLoading(false);}};// Refresh data\nconst handleRefresh=()=>{fetchDashboardData(selectedTimeframe);};// Update data from source\nconst handleUpdateData=async()=>{try{setLoading(true);await api.updateData();handleRefresh();}catch(err){console.error('Error updating data:',err);setError('Failed to update data. Please try again later.');setLoading(false);}};// Change timeframe\nconst handleTimeframeChange=timeframe=>{setSelectedTimeframe(timeframe);fetchDashboardData(timeframe);};// Initial data load\nuseEffect(()=>{fetchDashboardData(selectedTimeframe);},[]);if(loading&&!priceData.length){return/*#__PURE__*/_jsx(LoadingSpinner,{text:\"Loading dashboard data...\"});}return/*#__PURE__*/_jsxs(Container,{fluid:true,className:\"dashboard-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"page-title\",children:\"Gold Analysis Dashboard\"}),error&&/*#__PURE__*/_jsx(Alert,{variant:\"danger\",children:error}),/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex justify-content-between align-items-center mb-4\",children:[/*#__PURE__*/_jsxs(ButtonGroup,{className:\"timeframe-selector\",children:[/*#__PURE__*/_jsx(Button,{variant:selectedTimeframe==='1h'?'warning':'outline-warning',onClick:()=>handleTimeframeChange('1h'),children:\"1 Hour\"}),/*#__PURE__*/_jsx(Button,{variant:selectedTimeframe==='4h'?'warning':'outline-warning',onClick:()=>handleTimeframeChange('4h'),children:\"4 Hours\"}),/*#__PURE__*/_jsx(Button,{variant:selectedTimeframe==='1d'?'warning':'outline-warning',onClick:()=>handleTimeframeChange('1d'),children:\"Daily\"}),/*#__PURE__*/_jsx(Button,{variant:selectedTimeframe==='1w'?'warning':'outline-warning',onClick:()=>handleTimeframeChange('1w'),children:\"Weekly\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Button,{variant:\"outline-primary\",onClick:handleRefresh,className:\"me-2\",children:\"Refresh\"}),/*#__PURE__*/_jsx(Button,{variant:\"outline-success\",onClick:handleUpdateData,children:\"Update Data\"}),lastUpdate&&/*#__PURE__*/_jsxs(\"small\",{className:\"text-muted ms-2\",children:[\"Last updated: \",lastUpdate.toLocaleTimeString()]})]})]}),/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsxs(Card,{className:\"mb-4\",children:[/*#__PURE__*/_jsxs(Card.Header,{className:\"d-flex justify-content-between align-items-center\",children:[/*#__PURE__*/_jsx(\"h5\",{className:\"mb-0\",children:\"Gold Price Chart\"}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Button,{size:\"sm\",variant:showPredictions?'info':'outline-info',onClick:()=>setShowPredictions(!showPredictions),children:showPredictions?'Hide Predictions':'Show Predictions'})})]}),/*#__PURE__*/_jsx(Card.Body,{children:loading&&priceData.length>0?/*#__PURE__*/_jsx(LoadingSpinner,{text:\"Updating chart...\"}):/*#__PURE__*/_jsx(PriceChart,{priceData:priceData,showPrediction:showPredictions,predictionData:predictions,title:\"Gold Price - \".concat(selectedTimeframe.toUpperCase(),\" Timeframe\")})})]})})}),/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(SignalDisplay,{signal:signals})})})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Card","Button","ButtonGroup","Alert","PriceChart","SignalDisplay","LoadingSpinner","api","jsx","_jsx","jsxs","_jsxs","Dashboard","loading","setLoading","error","setError","priceData","setPriceData","predictions","setPredictions","signals","setSignals","selectedTimeframe","setSelectedTimeframe","lastUpdate","setLastUpdate","showPredictions","setShowPredictions","fetchDashboardData","timeframe","priceResponse","getPriceData","data","predictionsResponse","getPredictions","signalResponse","getSignal","Date","err","console","handleRefresh","handleUpdateData","updateData","handleTimeframeChange","length","text","fluid","className","children","variant","onClick","toLocaleTimeString","Header","size","Body","showPrediction","predictionData","title","concat","toUpperCase","signal"],"sources":["/Users/rahulsawant/Documents/Projects/goldpredict/Gold Analysis Platform/app/frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, Button, ButtonGroup, Alert } from 'react-bootstrap';\nimport PriceChart from '../components/PriceChart';\nimport SignalDisplay from '../components/SignalDisplay';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport api from '../services/api';\n\nconst Dashboard = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [priceData, setPriceData] = useState([]);\n  const [predictions, setPredictions] = useState([]);\n  const [signals, setSignals] = useState({});\n  const [selectedTimeframe, setSelectedTimeframe] = useState('1h');\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const [showPredictions, setShowPredictions] = useState(true);\n\n  // Fetch dashboard data\n  const fetchDashboardData = async (timeframe) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Fetch price data\n      const priceResponse = await api.getPriceData(timeframe, 100);\n      setPriceData(priceResponse.data);\n      \n      // Fetch predictions\n      const predictionsResponse = await api.getPredictions(timeframe);\n      setPredictions(predictionsResponse.data);\n      \n      // Fetch signal\n      const signalResponse = await api.getSignal(timeframe);\n      setSignals(signalResponse.data);\n      \n      setLastUpdate(new Date());\n    } catch (err) {\n      console.error('Error fetching dashboard data:', err);\n      setError('Failed to load dashboard data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Refresh data\n  const handleRefresh = () => {\n    fetchDashboardData(selectedTimeframe);\n  };\n\n  // Update data from source\n  const handleUpdateData = async () => {\n    try {\n      setLoading(true);\n      await api.updateData();\n      handleRefresh();\n    } catch (err) {\n      console.error('Error updating data:', err);\n      setError('Failed to update data. Please try again later.');\n      setLoading(false);\n    }\n  };\n\n  // Change timeframe\n  const handleTimeframeChange = (timeframe) => {\n    setSelectedTimeframe(timeframe);\n    fetchDashboardData(timeframe);\n  };\n\n  // Initial data load\n  useEffect(() => {\n    fetchDashboardData(selectedTimeframe);\n  }, []);\n\n  if (loading && !priceData.length) {\n    return <LoadingSpinner text=\"Loading dashboard data...\" />;\n  }\n\n  return (\n    <Container fluid className=\"dashboard-container\">\n      <h1 className=\"page-title\">Gold Analysis Dashboard</h1>\n      \n      {error && <Alert variant=\"danger\">{error}</Alert>}\n      \n      <div className=\"d-flex justify-content-between align-items-center mb-4\">\n        <ButtonGroup className=\"timeframe-selector\">\n          <Button \n            variant={selectedTimeframe === '1h' ? 'warning' : 'outline-warning'}\n            onClick={() => handleTimeframeChange('1h')}\n          >\n            1 Hour\n          </Button>\n          <Button \n            variant={selectedTimeframe === '4h' ? 'warning' : 'outline-warning'}\n            onClick={() => handleTimeframeChange('4h')}\n          >\n            4 Hours\n          </Button>\n          <Button \n            variant={selectedTimeframe === '1d' ? 'warning' : 'outline-warning'}\n            onClick={() => handleTimeframeChange('1d')}\n          >\n            Daily\n          </Button>\n          <Button \n            variant={selectedTimeframe === '1w' ? 'warning' : 'outline-warning'}\n            onClick={() => handleTimeframeChange('1w')}\n          >\n            Weekly\n          </Button>\n        </ButtonGroup>\n        \n        <div>\n          <Button variant=\"outline-primary\" onClick={handleRefresh} className=\"me-2\">\n            Refresh\n          </Button>\n          <Button variant=\"outline-success\" onClick={handleUpdateData}>\n            Update Data\n          </Button>\n          {lastUpdate && (\n            <small className=\"text-muted ms-2\">\n              Last updated: {lastUpdate.toLocaleTimeString()}\n            </small>\n          )}\n        </div>\n      </div>\n      \n      <Row>\n        <Col>\n          <Card className=\"mb-4\">\n            <Card.Header className=\"d-flex justify-content-between align-items-center\">\n              <h5 className=\"mb-0\">Gold Price Chart</h5>\n              <div>\n                <Button\n                  size=\"sm\"\n                  variant={showPredictions ? 'info' : 'outline-info'}\n                  onClick={() => setShowPredictions(!showPredictions)}\n                >\n                  {showPredictions ? 'Hide Predictions' : 'Show Predictions'}\n                </Button>\n              </div>\n            </Card.Header>\n            <Card.Body>\n              {loading && priceData.length > 0 ? (\n                <LoadingSpinner text=\"Updating chart...\" />\n              ) : (\n                <PriceChart \n                  priceData={priceData} \n                  showPrediction={showPredictions}\n                  predictionData={predictions}\n                  title={`Gold Price - ${selectedTimeframe.toUpperCase()} Timeframe`}\n                />\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      \n      <Row>\n        <Col>\n          <SignalDisplay signal={signals} />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Dashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}